{
  "active": false,
  "connections": {
    "If NODE": {
      "main": [
        [
          {
            "node": "based file name it assign differ metadata",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over each file in gdrive folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Web Search ": {
      "ai_tool": [
        [
          {
            "node": "ai chat agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive": {
      "main": [
        [
          {
            "node": "Loop Over each file in gdrive folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "add metadata": {
      "main": [
        [
          {
            "node": "Google Drive1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "clean output": {
      "main": [
        [
          {
            "node": "convert data into smaller chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive1": {
      "main": [
        [
          {
            "node": "Mistral Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Upload": {
      "main": [
        [
          {
            "node": "Mistral Signed URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "ai chat agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Mistral DOC OCR": {
      "main": [
        [
          {
            "node": "If NODE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set all metadata": {
      "main": [
        [
          {
            "node": "clean output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Signed URL": {
      "main": [
        [
          {
            "node": "Mistral DOC OCR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "ai chat agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store1",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store": {
      "ai_tool": [
        [
          {
            "node": "ai chat agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store1": {
      "main": [
        [
          {
            "node": "Loop Over each file in gdrive folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "based file name it assign differ metadata",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "ai chat agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "convert data into smaller chunks": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over each file in gdrive folder": {
      "main": [
        [],
        [
          {
            "node": "add metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "based file name it assign differ metadata": {
      "main": [
        [
          {
            "node": "set all metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-31T03:28:26.827Z",
  "id": "X7ZPZFl4WbuptJjM",
  "isArchived": false,
  "meta": null,
  "name": "My workflow 74",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "b9dae1d9-cf29-47d2-96b5-c2182f3a01f6",
      "name": "Embeddings OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "position": [
        2720,
        608
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "temperature": 0.5
        }
      },
      "id": "d56e7dc2-e351-483a-b5ae-e35f55dca3d6",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        1760,
        608
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "4CT8zdx4hKi3971O",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Web Search tool ",
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Authorization",
              "valueProvider": "fieldValue",
              "value": "add tavily token"
            },
            {
              "name": "Content-Type",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"{query}\",\n  \"topic\": \"general\",\n  \"search_depth\": \"advanced\",\n  \"max_results\": 20,\n  \"include_answer\": true,\n  \"include_raw_content\": false,\n  \"include_images\": false,\n  \"include_image_descriptions\": false,\n  \"include_domains\": [],\n  \"exclude_domains\": [\"\"]\n}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "query",
              "description": "Search Querry",
              "type": "string"
            }
          ]
        },
        "optimizeResponse": true
      },
      "id": "720b3ad7-3acc-4f6b-9e63-2c9fbe8789a6",
      "name": "Web Search ",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "position": [
        2432,
        656
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {},
      "id": "662196af-4d20-477b-9b03-4c99e9a5c23c",
      "name": "Simple Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        1920,
        608
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "add_name",
        "toolDescription": "Use RAG to look up information in the knowledgebase.",
        "qdrantCollection": {
          "__rl": true,
          "mode": "list",
          "value": "docaiauto",
          "cachedResultName": "docaiauto"
        },
        "topK": 3,
        "options": {}
      },
      "id": "382044b8-8759-46ad-ab5f-22973e9ac529",
      "name": "Qdrant Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "position": [
        2720,
        480
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "id": "d164772a-f7bc-4808-b8a3-638b90b12dac",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        1728,
        288
      ],
      "webhookId": "9c27865f-526c-490f-80a2-645bc919e9de",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.content }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "source",
                "value": "={{ $('set all metadata').item.json[\"Document name\"] }}"
              },
              {
                "name": "blobType",
                "value": "application/jsonb"
              },
              {
                "name": "loc",
                "value": "={{ $('Mistral DOC OCR').item.json.usage_info }}"
              },
              {
                "name": "source_metadata_id",
                "value": "={{ $('Google Drive1').item.json.file_url }}"
              },
              {
                "name": "department",
                "value": "ai_automation"
              },
              {
                "name": "PROJECT",
                "value": "={{ $('set all metadata').item.json.PROJECT }}"
              },
              {
                "name": "=DOCUMNENT_TYPE",
                "value": "={{ $('set all metadata').item.json.DOCUMENT_TYPE }}"
              },
              {
                "name": "ASSIGNED_TO",
                "value": "={{ $('set all metadata').item.json.ASSIGNEDTO }}"
              }
            ]
          }
        }
      },
      "id": "f8840025-05c6-44b3-a0ff-5a67f22cf1fd",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        4576,
        1504
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "9d9116d9-a31f-4250-9e55-428104f45635",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "position": [
        4640,
        1616
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "filter": {
          "folderId": {
            "__rl": true,
            "mode": "url",
            "value": "="
          }
        },
        "options": {
          "fields": [
            "id",
            "name",
            "webViewLink",
            "mimeType",
            "*"
          ]
        }
      },
      "id": "b77e4bc5-b23a-4ab3-9d53-cde28a5e449a",
      "name": "Google Drive",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        1600,
        1312
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "mode": "url",
          "value": "={{ $('add metadata').item.json.file_url }}"
        },
        "options": {}
      },
      "id": "9ce75d35-8fe1-4669-ae05-8b70a83edc76",
      "name": "Google Drive1",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        2320,
        1328
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "125623d2-59af-4784-8f86-9e4597517c19",
      "name": "Mistral Upload",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2560,
        1328
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "24"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "fdb7575e-a112-4016-93f8-d456b932d7b2",
      "name": "Mistral Signed URL",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2784,
        1328
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"type\": \"document_url\",\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"include_image_base64\": true\n}",
        "options": {}
      },
      "id": "8028e2c4-04dc-4bc6-863d-abd2e27e6de8",
      "name": "Mistral DOC OCR",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        3008,
        1328
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {},
      "id": "8d7154a9-fd1e-4a88-93bf-3a1233ce2214",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        1328,
        1312
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "05105ef7-a16e-462c-adf3-fa051dcf8bf3",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "position": [
        4400,
        1632
      ],
      "typeVersion": 1,
      "credentials": {
        "openAiApi": {
          "id": "4CT8zdx4hKi3971O",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "mode": "list",
          "value": "docaiauto",
          "cachedResultName": "docaiauto"
        },
        "embeddingBatchSize": "=200",
        "options": {}
      },
      "id": "8f27e10f-2ef7-4fdd-8b16-9223a9a09cd3",
      "name": "Qdrant Vector Store1",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "position": [
        4416,
        1328
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "model": "mistral-small-latest",
        "options": {}
      },
      "id": "8608b8f5-2488-4f24-b36a-73b61fa90550",
      "name": "Mistral Cloud Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "position": [
        3440,
        1632
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are a helpful, intelligent AI Knowledge Bot and proactive chat agent.  \nLead conversations by asking open-ended questions and offering suggestions.  \nAnticipate needs, follow up thoughtfully, and make the user feel supported throughout.\n\n---\n\n## **Knowledge Access Workflow**\n\n1. **Primary Source: qdrant vector store (`add_table_name` table)**  \n   - For **every** user query, first search **only** in qdrant.  \n   - If relevant information is found:\n     - Respond in a **clear, structured, and informative** manner.  \n     - **Always include multiple images** if available — aim for **maximum number of relevant images**, not just one.  \n       - Place each image **inline**, immediately after the sentence/section it illustrates.  \n       - Never group all images at the end.\n     - Always **cite the internal document name** and **provide a clickable URL** to the source document.\n       - Use `list doc` tool with `source_metadata_id` to retrieve the document URL.\n     \n     **Example Citation:**  \n     > This information is based on the internal AI documentation related to automation projects (Automation Timesheet Blogs).  \n     > [View Full Document](document_url_here)\n\n2. **If No  Match Found:**  \n   - Reply:  \n     `\"The information you requested is not available in our internal documentation. Would you like me to do a Web search?\"`\n\n3. **Web Search Rules:**  \n   - Only search if user explicitly agrees (e.g., \"Yes\", \"Okay\").  \n  - use 'web search 1'tool\n   - Clearly label as **External Source** and provide clickable URLs.  \n     Example:  \n     > This information comes from an external source ([website_name](source_url)).\n\n4. **If No Data in Qdrant or Web:**  \n   - Reply:  \n     `\"At the moment, there is no information available to fully address this request based on current internal and external sources.\"`\n\n---\n\n## **Formatting & Style**\n- **Language:** All qdrant queries in English; all responses in English.  \n- **Tone:** Professional, clear, structured, and helpful.  \n- **Image Usage:**  \n  - Always include **all available relevant images** MARKDOWN  — even if it means showing several per section.  \n  - Place images **exactly after the point they illustrate**.  \n  - Use different images for different subtopics, comparisons, or examples.  \n  - Do **not** skip images if they exist in the source.\n- **For Guide/Instruction Responses:**  \n  1. **Step-by-Step Guide** (detailed instructions)  \n  2. **Things to Consider** (common pitfalls, important details)  \n  3. **Further Understanding**  \n     - Suggest 2 related topics the user might explore next, relevant to their query.\n- Never skip key details. Always check if more images can be added to improve clarity.\n\n---\n\n## **Core Principles**\n- Be proactive — never wait for the user to guide the entire conversation.  \n- Ask open-ended follow-ups.  \n- Anticipate related needs based on the query.  \n- Maintain accuracy, cite sources, and **use as many relevant images as possible**.  \n-  ALWAYS SHOW  IMAGE AND Keep images inline and contextually placed.\n",
          "returnIntermediateSteps": false
        }
      },
      "id": "bea436ee-96bf-4f06-a323-496bbd95c2e6",
      "name": "ai chat agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        2224,
        288
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "content": "## WEB SEARCH using tavily (http node)\n [Tavily setup Guide](https://docs.tavily.com/welcome)",
        "height": 208,
        "width": 400,
        "color": 5
      },
      "id": "2a7d36fc-a87b-4165-a517-e9945d069824",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2240,
        592
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## GET ALL FILE DATA FROM SELECTED GOOGLE DRIVE FOLDER",
        "height": 400,
        "width": 224,
        "color": 5
      },
      "id": "afd5afa0-d67d-401b-92c6-20cc4bcf44d8",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1552,
        1104
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Remove  empty data fields  ",
        "height": 256,
        "width": 192,
        "color": 5
      },
      "id": "6f2ad45a-55e2-41e0-8ffb-0e4ff08f5379",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3168,
        1216
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## GET  individual files from selected gdrive",
        "height": 320,
        "width": 208,
        "color": 5
      },
      "id": "f3897bf8-c5e2-4566-9c96-b0b37fc71cd2",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2256,
        1152
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## MISTRAL OCR\n [OCR Guide](https://mistral.ai/news/mistral-ocr)\n1. UPLOAD FILE\n2. GET SIGNED URL\n3. GET EXTRACT DATA AFTER USING MISTRAL OCR",
        "height": 272,
        "width": 608,
        "color": 5
      },
      "id": "2765c61e-bf0c-474f-98d7-bd2b221f590d",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2512,
        1184
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Hosted Chat interface  \n",
        "height": 288,
        "width": 368,
        "color": 5
      },
      "id": "decf3460-4464-4b89-b3bc-77abe12eafa8",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1584,
        192
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## QDRANT VCETOR AND OPEN API EMBEDDING \n [QDRANT Guide](https://qdrant.tech/documentation/)",
        "height": 496,
        "width": 272,
        "color": 5
      },
      "id": "bd40b247-073b-40c2-ad32-f7b15436a653",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2704,
        272
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## AI chat agent\n interact with user and process user input and provide appropriate response using different tools. ",
        "height": 304,
        "width": 432,
        "color": 5
      },
      "id": "bf121b56-2670-4def-83d6-9f2693887c96",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2160,
        176
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## clean all extracted data and convert them to smaller chunks",
        "height": 288,
        "width": 320,
        "color": 5
      },
      "id": "2b329cee-7b9b-4706-a0f7-51433a4e68cf",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3904,
        1184
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## assignment agent\n\nfor any given file this node assign which type documents it is ,which project its related too and who are working on it",
        "height": 368,
        "width": 288,
        "color": 5
      },
      "id": "7c8d1e9c-28e7-48b9-9a32-327657b2ea76",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3408,
        1104
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## load all chunks into qdrant vector database",
        "height": 608,
        "width": 512,
        "color": 5
      },
      "id": "d55fefdc-c0ab-4f9a-be03-e64252019309",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        4320,
        1152
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## loop over google drive folder items",
        "height": 320,
        "width": 256,
        "color": 5
      },
      "id": "6c309a6f-3c96-465f-a745-0a13446eb24d",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1808,
        1168
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "f628e5be-9be2-43e1-8822-85ec80d58086",
      "name": "Loop Over each file in gdrive folder",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1840,
        1312
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "type": "string",
              "value": "={{ $json.id }}"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "type": "string",
              "value": "={{ $json.mimeType }}"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "file_title",
              "type": "string",
              "value": "={{ $json.name }}"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "file_url",
              "type": "string",
              "value": "={{ $json.webViewLink }}"
            },
            {
              "id": "fae402c8-c486-4b57-8d28-bf669db6b442",
              "name": "last_modified_date",
              "type": "string",
              "value": "={{ $json.modifiedTime }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ef037f29-da87-455d-8108-6a01752cf6d7",
      "name": "add metadata",
      "type": "n8n-nodes-base.set",
      "position": [
        2128,
        1328
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "loose"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "d15e917b-43d2-40b8-8b49-af467ff63961",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.data[0].parseJson().skipped }}",
              "rightValue": ""
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "ce1d412f-4054-4af8-a086-372e250d154d",
      "name": "If NODE",
      "type": "n8n-nodes-base.if",
      "position": [
        3216,
        1328
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "text": "=\n{{ $json.pages[0].markdown }}",
        "attributes": {
          "attributes": [
            {
              "name": "document_type",
              "description": "type of document this can be blog, user documentation, technical documentation, manual/guide, educational"
            },
            {
              "name": "project",
              "description": " from give project this can any one ,social/digimarketing ,  chatbot, knowledge bot if nothing that its default"
            },
            {
              "name": "assigned_to",
              "description": "who are handling give projects mention all name given for a give project\n\nif project LINKED/DIGIMARRKETING/SOCIAL = [employee name]\nif project KB BOT = [employee name]\nif project CHAT BOT = [employee name]\nif project TIMESHEET = [employee name]"
            }
          ]
        },
        "options": {
          "systemPromptTemplate": "You are an expert extraction algorithm.\nOnly extract relevant information from the text.\ngive data is "
        }
      },
      "id": "ce9f3cb4-be70-4b5d-8de8-5f4cd051a52b",
      "name": "based file name it assign differ metadata",
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "position": [
        3440,
        1328
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5132d92c-41da-4a55-ad79-0c329ca7e626",
              "name": "Document name",
              "type": "string",
              "value": "={{ $('Google Drive1').item.json.file_title }}"
            },
            {
              "id": "c8160701-2be7-43c6-bcfa-295fbebe0e23",
              "name": "Document data",
              "type": "string",
              "value": "={{ $('If NODE').item.json.pages[0].markdown }}"
            },
            {
              "id": "1087ab34-5643-4755-b545-cf34d0ae2cd2",
              "name": " source",
              "type": "string",
              "value": "={{ $('Google Drive1').item.json.file_id }}"
            },
            {
              "id": "4317aa31-d9fd-4adc-ab26-b48c208041b3",
              "name": "ASSIGNEDTO",
              "type": "string",
              "value": "={{ $json.output.assigned_to.split(\",\") }}"
            },
            {
              "id": "7a61d775-06b1-42e2-a82a-d8e756fa5586",
              "name": "PROJECT",
              "type": "string",
              "value": "={{ $json.output.project }}"
            },
            {
              "id": "300f49d6-8851-458d-a296-8ceb68ebdd5f",
              "name": "DOCUMENT_TYPE",
              "type": "string",
              "value": "={{ $json.output.document_type }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a4f7e266-aa6c-4ee0-8e4b-bf3efa6e2e8b",
      "name": "set all metadata",
      "type": "n8n-nodes-base.set",
      "position": [
        3744,
        1328
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "jsCode": "// Get incoming data (first item)\nconst data = items[0].json;\n\n// If wrapped in an array, unwrap it\nconst input = Array.isArray(data) ? data[0] : data;\n\nlet output = [\n  {\n    content: input[\"Document data\"], // main text for embedding\n    metadata: {\n      document_name: input[\"Document name\"],\n      source_id: input[\" source\"], // note: there is a space before \"source\" in your key\n    }\n  }\n];\n\nreturn output.map(o => ({ json: o }));\n"
      },
      "id": "12971893-f158-47f6-997b-e7ac3ca32688",
      "name": "clean output",
      "type": "n8n-nodes-base.code",
      "position": [
        3936,
        1328
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const chunkSize = 1000; // characters\nconst chunkOverlap = 100; // characters\n\n\nlet newItems = [];\n\nfor (const item of items) {\n    let text = item.json.content; // <-- use item.json\n    if (!text || typeof text !== \"string\") continue;\n\n    const sourceId = item.json.metadata.source_id;\n\n   \n    // Chunking\n    for (let i = 0; i < updatedText.length; i += chunkSize - chunkOverlap) {\n        let chunk = updatedText.slice(i, i + chunkSize);\n        newItems.push({\n            json: {\n                content: chunk,\n                metadata: item.json.metadata\n            }\n        });\n    }\n}\n\nreturn newItems;\n"
      },
      "id": "b9088d93-10ba-4ed6-b27e-2d7ebfd9654f",
      "name": "convert data into smaller chunks",
      "type": "n8n-nodes-base.code",
      "position": [
        4096,
        1328
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "### **Node List & Descriptions**\n\n1. **Manual Trigger**  \n   - **What:** Kicks off the workflow when the user clicks **“Test workflow.”**  \n   - **Why:** Allows for on-demand execution and testing of the data pipeline.  \n\n2. **Google Drive (List Files)**  \n   - **What:** Lists all files within a predefined Google Drive folder (`knowledgebaseforaibot`).  \n   - **Why:** To retrieve the initial list of all documents that need to be processed.  \n\n3. **Loop Over Files**  \n   - **What:** Iterates through each file retrieved from Google Drive, processing them one by one.  \n   - **Why:** Ensures each document is handled individually in the following steps.  \n\n4. **Google Drive (Download File)**  \n   - **What:** Downloads the binary content of the current file being processed in the loop.  \n   - **Why:** Provides the actual file data needed for OCR processing.  \n\n5. **Mistral OCR (via HTTP Requests)**  \n   - **What:**  \n     - Uploads the file to the Mistral API.  \n     - Retrieves a temporary signed URL for access.  \n     - Calls the Mistral OCR endpoint to extract all text content from the document.  \n   - **Why:** Converts scanned or image-based documents (like PDFs, JPGs) into machine-readable text.  \n\n6. **If Node (Check for Success)**  \n   - **What:** Verifies that the Mistral OCR operation completed successfully without errors.  \n   - **Why:** Ensures only valid, readable documents continue in the workflow, avoiding process failures.  \n\n7. **Information Extractor (LangChain)**  \n   - **What:** Uses the Mistral AI chat model to analyze the extracted text and assign metadata such as:  \n     - `document_type`  \n     - `project`  \n     - `assigned_to`  \n   - **Why:** Automatically categorizes and tags documents based on their content for better organization and searchability.  \n\n8. **Code Node (Clean & Chunk Data)**  \n   - **What:**  \n     - Formats the extracted text and metadata into a clean JSON structure.  \n     - Splits the document text into smaller, overlapping chunks (≈1000 characters each).  \n   - **Why:** Prepares data for embedding and ensures compatibility with language model context limits.  \n\n9. **OpenAI Embeddings (LangChain)**  \n   - **What:** Converts each text chunk into a numerical vector using OpenAI’s `text-embedding-3-small` model.  \n   - **Why:** Encodes the semantic meaning of the text for similarity-based search and retrieval.  \n\n10. **Qdrant Vector Store (LangChain)**  \n    - **What:** Inserts the text chunks and their corresponding embeddings into a Qdrant vector database collection named `docaiauto`.  \n    - **Why:** Creates a searchable, semantic knowledge base for AI-driven document retrieval.  \n\n---\n\n### **flow of data**\n\n**Trigger → List Files (Google Drive) → Loop → Download File → OCR (Mistral) → Validate → Categorize (AI) → Clean & Chunk → Embed (OpenAI) → Store (Qdrant)**\n",
        "height": 1248,
        "width": 800,
        "color": 5
      },
      "id": "2885a0b0-caab-4665-92f0-c4377d6530a2",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        4928,
        912
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# Konowledge RAG and AI chat agent  \n## by DIGITAL BIZ TECH\n\n## **Overview**\n\nThis workflow automates the process of transforming all files stored in Google Drive into a **searchable, intelligent knowledge base** — fully integrated with a **chat-enabled AI assistant**.  \nIt also supports **web search augmentation**, allowing the agent to explain, compare, or enrich document insights using the latest online data.\n\n---\n\n## **Key Objectives**\n\n1. **Ingest and Process All Files**\n   - Retrieve all files from a specific Google Drive folder.\n   - Automatically extract their text content using OCR and AI-based parsing.\n   - Generate structured metadata for each document (e.g., project, assignment, employee, and category).\n   - Convert the text into **vector embeddings** and store them in a **Qdrant vector database** for semantic retrieval.\n\n2. **Enrich Metadata Intelligence**\n   - Enhance each document with contextual metadata fields:\n     - `project` — identifies which project the document belongs to.\n     - `assignment` — links the file to a specific task or deliverable.\n     - `employee` — indicates the team member responsible or related to the document.\n   - Improves the **contextual accuracy** of RAG (Retrieval-Augmented Generation) queries by enabling more targeted retrieval.\n\n3. **Integrate with Chat-Based AI Agent**\n   - The agent uses a **ai agent with different tools** to:\n     - Query internal knowledge (Qdrant collection) for relevant chunks.\n     - Optionally trigger a **web search (Tavily API)** when internal data is insufficient.\n     - Combine results intelligently to deliver accurate and explainable answers.\n   - Users can interact naturally through a chat interface to explore, summarize, or cross-reference different documents.\n\n4. **Maintain a Robust RAG Pipeline for Unstructured Data**\n   - Designed to handle **unclean, inconsistent, or multi-format data sources** (PDFs, DOCX, images, etc.).\n   - The cleaning and chunking logic ensures uniform embeddings, even from noisy input.\n   - The RAG system automatically improves over time as new documents are added or updated in Google Drive.\n\n---\n\n## **Functional Flow**\n\n**Google Drive → File Extraction → Metadata Enrichment → Text Chunking → Embedding (OpenAI) → Storage (Qdrant) → AI Chat Agent → Web Search (Optional)**\n\n---\n\n## **Use Cases**\n\n- 📁 **Automated Knowledge Management:** Build a live, self-updating internal document knowledge base.  \n- 🧠 **Smart AI Assistance:** Enable employees to query project or task documents conversationally.  \n- 🌐 **Hybrid Knowledge Retrieval:** Combine private document insights with external web data.  \n- 🧩 **Flexible Integration:** Can be connected to any folder or department for scalable RAG deployment.\n\n---\n\n## **Benefits**\n\n- Fully automated ingestion from Google Drive.  \n- Rich, context-aware metadata for intelligent document relationships.  \n- Chat interface for easy access to organizational knowledge.  \n- Optional web search for real-time, external context expansion.  \n- Maintains a clean, high-quality **RAG (Retrieval-Augmented Generation)** pipeline even from unclean data sources.\n\n---\n\n### **Quick Reference: Flow Logic**\n\n**Google Drive → OCR/Text Extraction → Metadata Enrichment → Embeddings → Qdrant (RAG Store) → Chat AI Agent → Optional Web Search**",
        "height": 1856,
        "width": 864,
        "color": 5
      },
      "id": "c1f569db-f1e4-4355-9768-25a245157839",
      "name": "Sticky Note14",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "repo_name": "backup-n8n",
  "repo_owner": "faelsou",
  "repo_path": "backups/X7ZPZFl4WbuptJjM",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-10-31T03:28:26.827Z",
      "updatedAt": "2025-10-31T03:28:26.827Z",
      "role": "workflow:owner",
      "workflowId": "X7ZPZFl4WbuptJjM",
      "projectId": "uxvBhUmI1Fx6jdU7"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-31T03:40:05.209Z",
  "versionId": "447fb31d-b7e6-4bbe-8019-9c90af8e1e74"
}