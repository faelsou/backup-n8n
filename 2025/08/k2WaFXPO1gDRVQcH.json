{
  "active": false,
  "connections": {
    "n8n": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Create sub path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Failed Flows": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create sub path": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Completed Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Failed Flows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Starting Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Starting Message": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Starting Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-06T01:33:16.456Z",
  "id": "k2WaFXPO1gDRVQcH",
  "isArchived": false,
  "meta": null,
  "name": "My workflow 51",
  "nodes": [
    {
      "parameters": {},
      "id": "c75db00c-69e2-450e-a4b3-5059b2ae354a",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        480,
        112
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 731.7039821513649,
        "width": 1910.7813046051347,
        "color": 6
      },
      "id": "40bea9ee-cdb6-421e-a264-725caa9d4629",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        496
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "72e26df9-7a86-4314-b95d-fa1e053ac358",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        64,
        880
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "eeb813cf-bd65-49c5-a193-5b1856c5c93f",
      "name": "n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        880,
        224
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "fUsfeaHO0wdmKpr9",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "b29053c5-fb3d-43c4-923d-f1939ed1f66e",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        1728,
        704
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "172e9105-1ff2-4bc4-a1b3-8eeac0ad0c23",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        688,
        576
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "4717e952-3610-441d-a91e-03f224628f7b",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        448,
        592
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "4d5e2350-409c-4e5c-97f6-2a4f2a1d273b",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        448,
        864
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
      },
      "id": "82354e81-1635-4b97-921c-a10b798a2be0",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        640,
        864
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "0e6754ea-29b1-4b2e-902c-212d83d2230f",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        1040,
        864
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "b3f52f50-bb77-40e5-9c41-a581231d45d0",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1264,
        704
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "460742c4-73ec-48df-991b-fa0d4ec0640b",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1264,
        864
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "816784cb-2a00-4e03-a82b-49a205295658",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1264,
        1056
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": ""
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name }}",
          "mode": ""
        },
        "filePath": "={{ $('Config').first().item.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "9c87d73a-fdfe-4542-8cd7-888355450de9",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        1488,
        1056
      ],
      "typeVersion": 1,
      "webhookId": "b5a4db2b-72c9-4b0e-adaa-cf48501ad3ce",
      "credentials": {
        "githubOAuth2Api": {
          "id": "PRb1y9x4iWp22Pr5",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "mode": "",
          "value": "={{ $('Config').first().item.repo_owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "",
          "value": "={{ $('Config').first().item.repo_name }}"
        },
        "filePath": "={{ $('Config').first().item.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "a1de92cb-cc3f-4138-a761-709fc6e48404",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        1488,
        864
      ],
      "typeVersion": 1,
      "webhookId": "170a3250-cbfc-4c58-b135-074fd54b7897",
      "credentials": {
        "githubOAuth2Api": {
          "id": "PRb1y9x4iWp22Pr5",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "cec040e4-7ad4-424c-b24b-c13e811a3b5c",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1088,
        224
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtMinute": 30
            }
          ]
        }
      },
      "id": "2871528a-cabc-4676-b1d5-a6c9d9e65ef5",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        480,
        320
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dae43d3b-56e5-4098-b602-862ebf5cd073",
              "name": "subPath",
              "type": "string",
              "value": "={{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "005cd7f6-a7db-4bf1-800d-bf70a0392e81",
      "name": "Create sub path",
      "type": "n8n-nodes-base.set",
      "position": [
        848,
        864
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "content": "##Backup para o GitHub\nEste workflow fará backup de todos os workflows da instância para o GitHub a cada 24 horas.\n\nOs arquivos são salvos em pastas usando o formato YYYY/MM/ para o caminho do diretório e ID.json como nome do arquivo.\n\nO proprietário do repositório, o nome do repositório e a pasta principal são definidos usando o recurso Variáveis, mas podem ser substituídos pelo nó Config no subworkflow.\n\nO workflow chama a si mesmo para ajudar a reduzir o uso de memória. Assim que o processo for concluído, ele enviará uma notificação opcional para o Slack.\n\nTempo de Execução\nTestado com 1423 workflows na versão 1.44.1, levou menos de 30 minutos para a primeira execução e menos de 12 minutos após a execução inicial.",
        "height": 465,
        "width": 385,
        "color": 5
      },
      "id": "942e8110-3d80-4d10-b9ac-4de7df80a0e2",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 416.1856906618075,
        "width": 1272.6408145680155,
        "color": 7
      },
      "id": "c2df0506-4768-43cd-95ea-fab654524884",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        448,
        32
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "#backupfluxos",
          "mode": "name"
        },
        "text": "=:information_source:  Starting Workflow Backup [{{ $execution.id }}]",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "df84fc08-098a-4954-929b-e7c261dda7af",
      "name": "Starting Message",
      "type": "n8n-nodes-base.slack",
      "position": [
        720,
        224
      ],
      "webhookId": "c02eb407-5547-4aa0-9ebf-46dab67b63b6",
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "PA8mo1WmJVkdfUdH",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "09263e4d-a8c9-44ca-8534-a100e783ef79",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        1312,
        240
      ],
      "typeVersion": 1,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "#backupfluxos",
          "mode": "name"
        },
        "text": "=✅ Backup has completed - {{ $('n8n').all().length }} workflows have been processed.",
        "otherOptions": {}
      },
      "id": "d24bea25-5b4b-469d-9ebd-085c214d7485",
      "name": "Completed Notification",
      "type": "n8n-nodes-base.slack",
      "position": [
        1312,
        64
      ],
      "webhookId": "a0c6e8c8-5d71-40fa-b02b-63a7ed5726c4",
      "executeOnce": true,
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "PA8mo1WmJVkdfUdH",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "#backupfluxos",
          "mode": "name"
        },
        "text": "=:x: Failed to backup {{ $('Loop Over Items').item.json.id }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "1ec0e2a0-5112-4057-8f02-c0b5e82141a7",
      "name": "Failed Flows",
      "type": "n8n-nodes-base.slack",
      "position": [
        1504,
        256
      ],
      "webhookId": "2a092edb-de12-490f-931b-34d70e7d7696",
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "PA8mo1WmJVkdfUdH",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "= {{ $json.repo_owner }}",
          "mode": ""
        },
        "repository": {
          "__rl": true,
          "value": "={{ $json.repo_name }}",
          "mode": ""
        },
        "filePath": "={{ $('Config').first().item.repo_path }}{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/{{$json.id}}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "b92ef49c-9848-4417-b6ca-cb1671d00c81",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        240,
        592
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "webhookId": "5d4e08fc-e518-44f8-b95b-ecba53efda93",
      "credentials": {
        "githubOAuth2Api": {
          "id": "PRb1y9x4iWp22Pr5",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8f6d1741-772f-462a-811f-4c334185e4f0",
              "name": "repo_owner",
              "type": "string",
              "value": "faelsou"
            },
            {
              "id": "8cac215c-4fd7-422f-9fd2-6b2d1e5e0383",
              "name": "repo_name",
              "type": "string",
              "value": "backup-n8n"
            },
            {
              "id": "eee305e9-4164-462a-86bd-80f0d58a31ae",
              "name": "repo_path",
              "type": "string",
              "value": "backups/"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "d1d6d6d8-59ab-4456-8101-c474df273afe",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "position": [
        240,
        880
      ],
      "typeVersion": 3.4
    }
  ],
  "pinData": {},
  "repo_name": "backup-n8n",
  "repo_owner": "faelsou",
  "repo_path": "backups/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-08-06T01:40:51.364Z",
  "versionId": "754e6434-0636-46e7-b2e5-894b173f950d"
}