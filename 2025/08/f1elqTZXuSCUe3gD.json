{
  "active": false,
  "connections": {
    "Wait": {
      "main": [
        [
          {
            "node": "Extract Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Filter Out Empties",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Remove Duplicates (2)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Site": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract URLs": {
      "main": [
        [
          {
            "node": "Filter Google URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Emails": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Scrape Site",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Google URLs": {
      "main": [
        [
          {
            "node": "Remove Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Out Empties": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Google Maps": {
      "main": [
        [
          {
            "node": "Extract URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates (2)": {
      "main": [
        [
          {
            "node": "Add to Sheet (or whatever you want!)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Scrape Google Maps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-02T02:08:31.747Z",
  "id": "f1elqTZXuSCUe3gD",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "gerador leads google maps",
  "nodes": [
    {
      "parameters": {
        "content": "## 🗺️ STEP 1: Google Maps Data Extraction\n\nThis workflow starts by scraping Google Maps for business listings:\n\n**Process:** Uses HTTP requests to search Google Maps with queries like \"Calgary dentists\"\n**Output:** Raw HTML containing business listings and website URLs\n**Key:** No APIs required - direct HTML scraping\n\n**Note:** Replace search URL with your target location and business type",
        "height": 388,
        "width": 350
      },
      "id": "9d71b8cb-f87a-438c-b03e-2a415359b47f",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1232,
        -160
      ],
      "typeVersion": 1,
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## 🔗 STEP 2: Website URL Processing\n\nExtracts and cleans business website URLs:\n\n1. **Extract URLs:** JavaScript regex finds all website URLs in Google Maps data\n2. **Filter Google URLs:** Removes irrelevant domains (google.com, gstatic, etc.)\n3. **Remove Duplicates:** Eliminates duplicate websites\n4. **Limit:** Controls batch size for testing (adjust for production)\n\n**Result:** Clean list of actual business websites ready for email extraction",
        "height": 392,
        "width": 380
      },
      "id": "c1001180-598a-4cd8-b123-21d8f4772e06",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -800,
        -160
      ],
      "typeVersion": 1,
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## 🔄 STEP 3: Smart Website Scraping\n\nProcesses each website individually to prevent IP blocking:\n\n**Loop Over Items:** Processes websites one by one with built-in delays\n**Scrape Site:** Downloads HTML content from each business website\n**Wait Nodes:** Prevent rate limiting and IP blocking\n**Error Handling:** Continues processing even if some sites fail\n\n**Critical:** The batching and delays are essential for reliable operation at scale",
        "height": 392,
        "width": 380
      },
      "id": "31882e33-689f-4382-8e7e-7dfc6cc99070",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -400,
        -160
      ],
      "typeVersion": 1,
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## 📧 STEP 4: Email Extraction & Export\n\nFinal processing pipeline:\n\n1. **Extract Emails:** JavaScript regex finds all email addresses in website HTML\n2. **Filter Out Empties:** Removes websites with no emails found\n3. **Split Out:** Converts email arrays into individual items\n4. **Remove Duplicates:** Final deduplication across all sources\n5. **Add to Sheet:** Exports clean email list to Google Sheets\n\n**Result:** Organized database of business emails ready for outreach",
        "height": 396,
        "width": 400
      },
      "id": "88a67cef-d1ea-4b24-8f13-e05dda023460",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        -160
      ],
      "typeVersion": 1,
      "name": "Sticky Note3"
    },
    {
      "parameters": {},
      "id": "142b154f-36e6-4b63-8910-b7fc627be132",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -960,
        352
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "0907bac6-cc5b-4d14-a226-c568c979957e",
      "name": "Remove Duplicates",
      "type": "n8n-nodes-base.removeDuplicates",
      "position": [
        -160,
        352
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "64cc2609-7067-4e39-800d-bd7e6ad34a6f",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        240,
        352
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "amount": 1
      },
      "id": "102acb6a-8417-4bbc-b623-f890f7f7b731",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "position": [
        608,
        448
      ],
      "webhookId": "19cc6ed4-4fe7-485b-b879-c679e4b3374d",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "maxItems": 10
      },
      "id": "3d76a634-1655-4499-b657-a319c8aeb687",
      "name": "Limit",
      "type": "n8n-nodes-base.limit",
      "position": [
        32,
        352
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "8a5d0d50-6e3a-46e4-815e-d5d82a335ef6",
      "name": "Wait1",
      "type": "n8n-nodes-base.wait",
      "position": [
        432,
        288
      ],
      "webhookId": "0fe34756-6e43-4603-8891-5747a9a6500a",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "fieldToSplitOut": "emails",
        "options": {}
      },
      "id": "091c1387-3a3d-49a3-b6cd-219c6677c268",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        784,
        288
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json.data\nconst regex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(?!jpeg|jpg|png|gif|webp|svg)[a-zA-Z]{2,}/g\nconst emails = input.match(regex)\nreturn {json: {emails:emails}}"
      },
      "id": "68a44c94-89ad-46b2-be98-ebd54361fe12",
      "name": "Extract Emails",
      "type": "n8n-nodes-base.code",
      "position": [
        784,
        448
      ],
      "typeVersion": 2,
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json.data\nconst regex = /https?:\\/\\/[^\\/\\s\"'>]+/g\nconst websites = input.match(regex)\nreturn websites.map(website => ({json:{website}}))"
      },
      "id": "23fa22d3-2a84-4679-9595-aea1ea1ea7c0",
      "name": "Extract URLs",
      "type": "n8n-nodes-base.code",
      "position": [
        -560,
        352
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "https://www.google.com/maps/search/Dentista/@-23.5991968,-46.7964193,14z/data=!3m1!4b1?entry=ttu&g_ep=EgoyMDI1MDczMC4wIKXMDSoASAFQAw%3D%3D",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "1f5dbc4d-fe8f-48eb-a7fb-efecdbb9ad74",
      "name": "Scrape Google Maps",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -768,
        352
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "url": "={{ $json.website }}",
        "options": {
          "redirect": {
            "redirect": {
              "followRedirects": false
            }
          }
        }
      },
      "id": "16605fd1-07ff-427a-a7bb-2c23b43c3a12",
      "name": "Scrape Site",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        432,
        448
      ],
      "typeVersion": 4.2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "a6786c58-424a-409a-b87f-8a7592cb7944",
              "operator": {
                "type": "array",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.emails }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "810896e4-99da-4361-b3e8-27e0a313d037",
      "name": "Filter Out Empties",
      "type": "n8n-nodes-base.filter",
      "position": [
        608,
        288
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "bf0a5053-9660-457c-9581-964793bb6d7d",
              "operator": {
                "type": "string",
                "operation": "notContains"
              },
              "leftValue": "={{ $json.website }}",
              "rightValue": "schema"
            },
            {
              "id": "9110b9e0-12aa-45cc-bde0-9eda8c10970e",
              "operator": {
                "type": "string",
                "operation": "notContains"
              },
              "leftValue": "={{ $json.website }}",
              "rightValue": "google"
            },
            {
              "id": "fb9b6ed6-96a5-4560-ab10-b8a4b9a61a2b",
              "operator": {
                "type": "string",
                "operation": "notContains"
              },
              "leftValue": "={{ $json.website }}",
              "rightValue": "gg"
            },
            {
              "id": "10500c0b-cdbd-4816-aba3-df60d69845dc",
              "operator": {
                "type": "string",
                "operation": "notContains"
              },
              "leftValue": "={{ $json.website }}",
              "rightValue": "gstatic"
            }
          ]
        },
        "options": {}
      },
      "id": "3fd5c997-d9d4-48a6-9099-66a4da40c35f",
      "name": "Filter Google URLs",
      "type": "n8n-nodes-base.filter",
      "position": [
        -368,
        352
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "963a76c6-bef3-4481-ab31-8297b1434692",
      "name": "Remove Duplicates (2)",
      "type": "n8n-nodes-base.removeDuplicates",
      "position": [
        992,
        288
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1wlPMHS4f268wQ6bB9T97UYax9OLVj2LA44qQfK7zYVM",
          "mode": "list",
          "cachedResultName": "emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1wlPMHS4f268wQ6bB9T97UYax9OLVj2LA44qQfK7zYVM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1432361606,
          "mode": "list",
          "cachedResultName": "Página3",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1wlPMHS4f268wQ6bB9T97UYax9OLVj2LA44qQfK7zYVM/edit#gid=1432361606"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "13470ad3-28a4-479f-9003-8ac81915ebb8",
      "name": "Add to Sheet (or whatever you want!)",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        1184,
        288
      ],
      "typeVersion": 4.5,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "9mBAGO96M4MyCggv",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "repo_name": "backup-n8n",
  "repo_owner": "faelsou",
  "repo_path": "backups/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-08-02T01:49:41.207Z",
      "updatedAt": "2025-08-02T01:49:41.207Z",
      "id": "w8YRxUx0Ov631Pos",
      "name": "N8N Course"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-08-02T07:12:20.661Z",
  "versionId": "ed8208f5-0369-403c-9885-15e1d296ddaa"
}